document.addEventListener('DOMContentLoaded', () => {
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const bookListContainer = document.getElementById('book-list-container');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const searchInput = document.getElementById('search-input');
    const addBookBtn = document.getElementById('add-book-btn');
    const addDialog = document.getElementById('add-book-dialog');
    const addBookForm = document.getElementById('add-book-form');
    const cancelAddBtn = document.getElementById('cancel-btn');
    const detailDialog = document.getElementById('detail-dialog');
    const detailContent = document.getElementById('detail-view-content');
    const sortSelect = document.getElementById('sort-select');

    let allBooksData = { myLibrary: [], wishlist: [] };
    let activeFilter = 'my-library';

    const booksPerPage = 15; // –°–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    let currentPage = 1; // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    let currentlyDisplayedBooks = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥

    // --- –§–£–ù–ö–¶–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ù–ò–ì –ù–ê –ì–õ–ê–í–ù–û–ô ---
    function renderBooks(booksToRender, listType) {
        bookListContainer.innerHTML = '';
        if (booksToRender.length === 0) {
            bookListContainer.innerHTML =
                '<p class="placeholder">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>';
            return;
        }
        booksToRender.forEach((book) => {
            const bookCard = document.createElement('div');
            bookCard.className = 'book-card';
            bookCard.dataset.bookId = book.id;
            bookCard.dataset.listType = listType;

            const locationIcon = book.location === 'work' ? 'üíº' : 'üè†';
            const locationBadge =
                book.format === 'physical'
                    ? `<div class="book-card-location" title="–ù–∞—Ö–æ–¥–∏—Ç—Å—è: ${
                          book.location === 'work' ? '–ù–∞ —Ä–∞–±–æ—Ç–µ' : '–î–æ–º–∞'
                      }">${locationIcon}</div>`
                    : '';

            // --- –ù–û–í–û–ï: –£—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ ---
            let coverHtml = '';
            if (book.format === 'digital') {
                coverHtml = `<div class="book-cover-placeholder"><h3>${book.title}</h3></div>`;
            } else {
                coverHtml = `<img src="${
                    book.coverImage ||
                    'https://via.placeholder.com/240x350.png?text=No+Cover'
                }" alt="–û–±–ª–æ–∂–∫–∞ –∫–Ω–∏–≥–∏ ${book.title}" class="book-cover">`;
            }

            let cardContent = `
            ${locationBadge}
            ${coverHtml}
            <div class="book-info">
                <h2 class="book-title">${book.title}</h2>
                <p class="book-author">${book.author}</p>
                <div class="book-meta">
                    <span class="book-rating">‚≠ê ${
                        book.rating?.overall || ''
                    }</span>
                    <span class="book-status">${
                        book.status ? translateStatus(book.status) : ''
                    }</span>
                </div>
            </div>
        `;

            if (listType === 'wishlist') {
                cardContent = `
                <div class="book-info wishlist-info">
                    <h2 class="book-title">${book.title}</h2>
                    <p class="book-author">${book.author}</p>
                </div>
            `;
            }

            bookCard.innerHTML = cardContent;
            bookCard.addEventListener('click', () => {
                showDetailModal(book.id, listType);
            });
            bookListContainer.appendChild(bookCard);
        });
    }

    function updatePaginationUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        document.querySelectorAll('.page-btn').forEach((button) => {
            button.classList.toggle(
                'active',
                parseInt(button.dataset.page) === currentPage
            );
        });
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
        renderShowMoreButton();
    }

    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    async function moveBook(bookId, currentLocation) {
        const newLocation = currentLocation === 'home' ? 'work' : 'home';
        try {
            const response = await fetch(`/api/books/${bookId}/location`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ location: newLocation }),
            });
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
            const bookInState = allBooksData.myLibrary.find(
                (b) => b.id === bookId
            );
            if (bookInState) {
                bookInState.location = newLocation;
            }

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            applyFiltersAndSearch(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
            renderDetailView(bookInState, 'library'); // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫–Ω–∏–≥—É:', error);
            alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
        }
    }

    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–∏–≥–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function displayPage(pageNumber, append = false) {
        currentPage = pageNumber;
        const startIndex = (currentPage - 1) * booksPerPage;
        const endIndex = startIndex + booksPerPage;

        const booksForCurrentPage = currentlyDisplayedBooks.slice(
            startIndex,
            endIndex
        );
        const listType = activeFilter === 'wishlist' ? 'wishlist' : 'library';

        // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ append –≤ renderBooks
        renderBooks(booksForCurrentPage, listType, append);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
        updatePaginationUI();
    }

    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    function setupPagination() {
        const paginationContainer = document.getElementById(
            'pagination-container'
        );
        paginationContainer.innerHTML = '';
        const pageCount = Math.ceil(
            currentlyDisplayedBooks.length / booksPerPage
        );

        if (pageCount < 2) return;

        for (let i = 1; i <= pageCount; i++) {
            const button = document.createElement('button');
            button.className = 'page-btn';
            button.innerText = i;
            button.dataset.page = i;
            button.addEventListener('click', () => {
                // –ö–ª–∏–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ–≥–¥–∞ –ó–ê–ú–ï–ù–Ø–ï–¢ –∫–æ–Ω—Ç–µ–Ω—Ç
                displayPage(i, false);
            });
            paginationContainer.appendChild(button);
        }
    }

    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    function renderShowMoreButton() {
        const showMoreContainer = document.getElementById(
            'show-more-container'
        );
        showMoreContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

        const totalPages = Math.ceil(
            currentlyDisplayedBooks.length / booksPerPage
        );

        if (currentPage < totalPages) {
            const button = document.createElement('button');
            button.id = 'show-more-btn';
            button.innerText = '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ';
            button.addEventListener('click', () => {
                // –ü—Ä–∏ –∫–ª–∏–∫–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–î–û–ë–ê–í–û–ö –∫ —Ç–µ–∫—É—â–∏–º
                displayPage(currentPage + 1, true);
            });
            showMoreContainer.appendChild(button);
        }
    }

    // --- –§–£–ù–ö–¶–ò–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ò –ü–û–ò–°–ö–ê ---
    function applyFiltersAndSearch() {
        let filteredBooks = [];

        // 1. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (activeFilter === 'my-library') {
            filteredBooks = [...allBooksData.myLibrary];
        } else if (activeFilter === 'to-read') {
            filteredBooks = allBooksData.myLibrary.filter(
                (book) => book.status === 'to-read'
            );
        } else if (activeFilter === 'wishlist') {
            filteredBooks = [...allBooksData.wishlist];
        }

        // 2. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        const searchQuery = searchInput.value.toLowerCase().trim();
        if (searchQuery) {
            filteredBooks = filteredBooks.filter(
                (book) =>
                    book.title.toLowerCase().includes(searchQuery) ||
                    book.author.toLowerCase().includes(searchQuery)
            );
        }

        // 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º
        const sortValue = sortSelect.value;
        if (sortValue !== 'default') {
            filteredBooks.sort((a, b) => {
                switch (sortValue) {
                    case 'title-asc':
                        return a.title.localeCompare(b.title);
                    case 'title-desc':
                        return b.title.localeCompare(a.title);
                    case 'author-asc':
                        return a.author.localeCompare(b.author);
                    case 'author-desc':
                        return b.author.localeCompare(a.author);
                    case 'rating-desc':
                        return (
                            (b.rating?.overall || 0) - (a.rating?.overall || 0)
                        );
                    case 'rating-asc':
                        return (
                            (a.rating?.overall || 11) -
                            (b.rating?.overall || 11)
                        );
                    default:
                        return 0;
                }
            });
        }

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        currentlyDisplayedBooks = filteredBooks;
        currentPage = 1; // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ/—Ñ–∏–ª—å—Ç—Ä–µ

        setupPagination();
        // –í–ê–ñ–ù–û: –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ/—Ñ–∏–ª—å—Ç—Ä–µ –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ó–ê–ú–ï–ù–Ø–Ø –∫–æ–Ω—Ç–µ–Ω—Ç
        displayPage(currentPage, false);
    }

    // --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –î–ï–¢–ê–õ–ï–ô ---

    function renderRecommendations(recommendations) {
        const container = document.getElementById('recommendations-list');
        if (!container) return;
        container.innerHTML = '';
        if (recommendations.length === 0) {
            container.innerHTML =
                '<p class="placeholder">–ü–æ—Ö–æ–∂–∏—Ö –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>';
            return;
        }
        recommendations.forEach((book) => {
            const recCard = document.createElement('div');
            recCard.className = 'recommendation-card';
            recCard.innerHTML = `<img src="${
                book.coverImage ||
                'https://via.placeholder.com/80x120.png?text=N/A'
            }" alt="${book.title}"><p class="recommendation-title">${
                book.title
            }</p>`;
            recCard.addEventListener('click', () => {
                detailDialog.close();
                setTimeout(() => showDetailModal(book.id, 'library'), 150);
            });
            container.appendChild(recCard);
        });
    }

    async function showDetailModal(bookId, listType) {
        const bookData = allBooksData[
            listType === 'wishlist' ? 'wishlist' : 'myLibrary'
        ].find((b) => b.id === bookId);
        if (!bookData) return;

        renderDetailView(bookData, listType);
        detailDialog.showModal();

        if (listType === 'library') {
            try {
                const response = await fetch(
                    `/api/books/${bookId}/recommendations`
                );
                const recommendations = await response.json();
                renderRecommendations(recommendations);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
                const recContainer = document.getElementById(
                    'recommendations-list'
                );
                if (recContainer)
                    recContainer.innerHTML =
                        '<p class="placeholder">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.</p>';
            }
        }
    }

    function renderDetailView(book, listType) {
        const createTagList = (items) => {
            if (!items || items.length === 0)
                return '<p class="placeholder-inline">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
            return items
                .map((item) => `<span class="tag-item">${item}</span>`)
                .join('');
        };

        const recommendationsBlock =
            listType === 'library'
                ? `
        <div class="detail-section recommendations-section">
            <h4>–ü–æ—Ö–æ–∂–∏–µ –∫–Ω–∏–≥–∏</h4>
            <div id="recommendations-list">
                <p class="placeholder">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            </div>
        </div>
    `
                : '';

        // --- –ù–û–í–û–ï: –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ---
        const formatText =
            book.format === 'digital' ? '–¶–∏—Ñ—Ä–æ–≤–∞—è' : '–§–∏–∑–∏—á–µ—Å–∫–∞—è';
        const locationText = book.location === 'work' ? '–ù–∞ —Ä–∞–±–æ—Ç–µ' : '–î–æ–º–∞';
        const moveButtonText =
            book.location === 'work' ? '–ó–∞–±—Ä–∞—Ç—å –¥–æ–º–æ–π' : '–û—Ç–Ω–µ—Å—Ç–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É';

        // –ö–Ω–æ–ø–∫—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∫–Ω–∏–≥
        const locationBlock =
            book.format === 'physical'
                ? `
        <div class="detail-location-wrapper">
            <p><strong>–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ:</strong> ${locationText}</p>
            <button class="btn btn-secondary" id="move-location-btn">${moveButtonText}</button>
        </div>`
                : '';

        const coverHtml =
            book.format === 'digital'
                ? `<div class="book-cover-placeholder detail-cover"><h3>${book.title}</h3></div>`
                : `<img src="${
                      book.coverImage ||
                      'https://via.placeholder.com/240x350.png?text=N/A'
                  }" alt="–û–±–ª–æ–∂–∫–∞" class="detail-cover">`;

        detailContent.innerHTML = `
        <div class="detail-header">
            ${coverHtml}
            <div class="detail-header-info">
                <h2>${book.title}</h2>
                <h3>${book.author}</h3>
                ${
                    book.series?.name
                        ? `<p class="series-info">${book.series.name}, –∫–Ω–∏–≥–∞ #${book.series.bookNumber}</p>`
                        : ''
                }
                <div class="detail-actions-main">
                    <button class="btn btn-danger" id="delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
                    <button class="btn btn-secondary" id="edit-btn">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button class="btn btn-secondary" id="close-detail-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        </div>

        <div class="detail-body">
            <div class="detail-section">
                <h4>–ë–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—è</h4>
                <div class="detail-grid">
                    <p><strong>–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ:</strong> ${
                        book.publisher || '‚Äì'
                    }</p>
                    <p><strong>–ò–∑–¥. —Å–µ—Ä–∏—è:</strong> ${
                        book.publisherSeries || '‚Äì'
                    }</p> <p><strong>–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:</strong> ${
            book.publicationYear || '‚Äì'
        }</p>
                    <p><strong>–°—Ç—Ä:</strong> ${book.pageCount || '‚Äì'}</p>
                    <p><strong>–§–æ—Ä–º–∞—Ç:</strong> ${formatText}</p> <p><strong>–ü—Ä–æ—á–∏—Ç–∞–Ω–∞:</strong> ${
            book.dateRead || '‚Äì'
        }</p>
                </div>
                ${locationBlock}
            </div>

            <div class="detail-section">
                <h4>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h4>
                <p><strong>–ñ–∞–Ω—Ä:</strong> ${book.genre || '‚Äì'}</p>
                <p><strong>–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã:</strong></p>
                <div class="tag-list">${createTagList(book.keyThemes)}</div>
                <p><strong>–¢–µ–≥–∏:</strong></p>
                <div class="tag-list">${createTagList(book.tags)}</div>
            </div>

            <div class="detail-section">
                <h4>–ú–æ—è –æ—Ü–µ–Ω–∫–∞</h4>
                <div class="detail-grid">
                    <p><strong>–û–±—â–∞—è:</strong> ‚≠ê ${
                        book.rating?.overall || '‚Äì'
                    }</p>
                    <p><strong>–°—é–∂–µ—Ç:</strong> ${
                        book.rating?.plot || '‚Äì'
                    }/10</p>
                    <p><strong>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:</strong> ${
                        book.rating?.characters || '‚Äì'
                    }/10</p>
                    <p><strong>–ú–∏—Ä:</strong> ${
                        book.rating?.worldBuilding || '‚Äì'
                    }/10</p>
                    <p><strong>–°—Ç–∏–ª—å:</strong> ${
                        book.rating?.prose || '‚Äì'
                    }/10</p>
                </div>
                <p><strong>–ó–∞–º–µ—Ç–∫–∏:</strong> ${book.myNotes || '‚Äì'}</p>
            </div>
        </div>
        ${recommendationsBlock}
    `;

        const moveBtn = document.getElementById('move-location-btn');
        if (moveBtn) {
            moveBtn.addEventListener('click', () =>
                moveBook(book.id, book.location)
            );
        }
        document
            .getElementById('edit-btn')
            .addEventListener('click', () => renderEditView(book, listType));
        document
            .getElementById('close-detail-btn')
            .addEventListener('click', () => detailDialog.close());
        document
            .getElementById('delete-btn')
            .addEventListener('click', () => deleteBook(book.id));
    }

    function renderEditView(book, listType) {
        const arrayToString = (arr) => arr?.join(', ') || '';

        detailContent.innerHTML = `
        <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</h3>
        <form id="edit-book-form" class="edit-form-grid">
            <fieldset>
                <legend>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</legend>
                <div class="form-group"><label for="edit-title">–ù–∞–∑–≤–∞–Ω–∏–µ</label><input type="text" id="edit-title" value="${
                    book.title || ''
                }"></div>
                <div class="form-group"><label for="edit-author">–ê–≤—Ç–æ—Ä</label><input type="text" id="edit-author" value="${
                    book.author || ''
                }"></div>
                <div class="form-group"><label for="edit-coverImage">URL –æ–±–ª–æ–∂–∫–∏</label><input type="text" id="edit-coverImage" value="${
                    book.coverImage || ''
                }"></div>
                
                <div class="form-group"><label for="edit-format">–§–æ—Ä–º–∞—Ç</label>
                    <select id="edit-format">
                        <option value="physical" ${
                            book.format === 'physical' ? 'selected' : ''
                        }>–§–∏–∑–∏—á–µ—Å–∫–∞—è</option>
                        <option value="digital" ${
                            book.format === 'digital' ? 'selected' : ''
                        }>–¶–∏—Ñ—Ä–æ–≤–∞—è</option>
                    </select>
                </div>
                <div class="form-group"><label for="edit-location">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</label>
                    <select id="edit-location">
                        <option value="home" ${
                            book.location === 'home' ? 'selected' : ''
                        }>–î–æ–º–∞</option>
                        <option value="work" ${
                            book.location === 'work' ? 'selected' : ''
                        }>–ù–∞ —Ä–∞–±–æ—Ç–µ</option>
                    </select>
                </div>
                <div class="form-group"><label for="edit-dateRead">–î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è</label><input type="date" id="edit-dateRead" value="${
                    book.dateRead || ''
                }"></div>
            </fieldset>
            
            <fieldset>
                <legend>–ë–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—è</legend>
                <div class="form-group"><label for="edit-publisher">–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ</label><input type="text" id="edit-publisher" value="${
                    book.publisher || ''
                }"></div>
                <div class="form-group"><label for="edit-publisherSeries">–ò–∑–¥–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Ä–∏—è</label><input type="text" id="edit-publisherSeries" value="${
                    book.publisherSeries || ''
                }"></div>
                <div class="form-group"><label for="edit-publicationYear">–ì–æ–¥</label><input type="number" id="edit-publicationYear" value="${
                    book.publicationYear || ''
                }"></div>
                <div class="form-group"><label for="edit-pageCount">–°—Ç—Ä.</label><input type="number" id="edit-pageCount" value="${
                    book.pageCount || ''
                }"></div>
                <div class="form-group"><label for="edit-isbn">ISBN</label><input type="text" id="edit-isbn" value="${
                    book.isbn || ''
                }"></div>
            </fieldset>
            
            <fieldset>...</fieldset>
            <fieldset>...</fieldset>
            
            <div class="detail-actions wide">
                <button type="submit" class="btn btn-success" id="save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button type="button" class="btn btn-secondary" id="cancel-edit-btn">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </form>
    `;

        document
            .getElementById('edit-book-form')
            .addEventListener('submit', (e) => {
                e.preventDefault();
                saveBookChanges(book.id);
            });
        document
            .getElementById('cancel-edit-btn')
            .addEventListener('click', () => renderDetailView(book, listType));
    }

    // --- –§–£–ù–ö–¶–ò–ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –° API ---

    async function saveBookChanges(bookId) {
        const stringToArray = (str) =>
            str ? str.split(',').map((item) => item.trim()) : [];
        const getIntOrNull = (id) => {
            const value = document.getElementById(id).value;
            return value ? parseInt(value, 10) : null;
        };

        const updatedBook = {
            id: bookId,
            title: document.getElementById('edit-title').value,
            author: document.getElementById('edit-author').value,
            coverImage: document.getElementById('edit-coverImage').value,
            // --- –ù–û–í–´–ï –ü–û–õ–Ø ---
            dateRead: document.getElementById('edit-dateRead').value,
            location: document.getElementById('edit-location').value,
            format: document.getElementById('edit-format').value,
            publisherSeries: document.getElementById('edit-publisherSeries')
                .value,
            // ---
            isbn: document.getElementById('edit-isbn').value,
            publisher: document.getElementById('edit-publisher').value,
            publicationYear: getIntOrNull('edit-publicationYear'),
            pageCount: getIntOrNull('edit-pageCount'),
            genre: document.getElementById('edit-genre').value,
            series: {
                name: document.getElementById('edit-series-name').value,
                bookNumber: getIntOrNull('edit-series-number'),
            },
            tags: stringToArray(document.getElementById('edit-tags').value),
            keyThemes: stringToArray(
                document.getElementById('edit-keyThemes').value
            ),
            status: document.getElementById('edit-status').value, // –≠—Ç–æ –ø–æ–ª–µ –±—ã–ª–æ –≤ –¥—Ä—É–≥–æ–π —Å–µ–∫—Ü–∏–∏, –Ω–æ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å
            rating: {
                overall: getIntOrNull('edit-rating-overall'),
                plot: getIntOrNull('edit-rating-plot'),
                characters: getIntOrNull('edit-rating-characters'),
                worldBuilding: getIntOrNull('edit-rating-world'),
                prose: getIntOrNull('edit-rating-prose'),
            },
            myNotes: document.getElementById('edit-myNotes').value,
        };

        try {
            const response = await fetch(`/api/books/${bookId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedBook),
            });
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            detailDialog.close();
            initApp();
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    }

    async function deleteBook(bookId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É?')) return;
        try {
            const response = await fetch(`/api/books/${bookId}`, {
                method: 'DELETE',
            });
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
            detailDialog.close();
            initApp();
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É:', error);
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    }

    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---

    async function initApp() {
        try {
            const response = await fetch('/api/books');
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
            allBooksData = await response.json();
            applyFiltersAndSearch();
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:', error);
            bookListContainer.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</p>';
        }
    }

    function translateStatus(status) {
        const statuses = {
            read: '–ü—Ä–æ—á–∏—Ç–∞–Ω–∞',
            'to-read': '–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å',
            reading: '–ß–∏—Ç–∞—é',
        };
        return statuses[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ---

    filterButtons.forEach((button) => {
        button.addEventListener('click', () => {
            filterButtons.forEach((btn) => btn.classList.remove('active'));
            button.classList.add('active');
            activeFilter = button.dataset.filter;
            applyFiltersAndSearch();
        });
    });

    addBookBtn.addEventListener('click', () => addDialog.showModal());
    cancelAddBtn.addEventListener('click', () => addDialog.close());

    addBookForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(addBookForm);
        // –≠—Ç–æ—Ç –∫–æ–¥ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª. –ï–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å.
        const newBook = {
            title: formData.get('title'),
            author: formData.get('author'),
            status: formData.get('status'),
            tags: formData
                .get('tags')
                .split(',')
                .map((tag) => tag.trim()),
        };

        try {
            const response = await fetch('/api/add-book', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(newBook),
            });
            if (!response.ok) throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–∏–≥—É');
            addBookForm.reset();
            addDialog.close();
            initApp();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É');
        }
    });

    searchInput.addEventListener('input', applyFiltersAndSearch);

    sortSelect.addEventListener('change', () => {
        applyFiltersAndSearch();
    });

    // --- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
    initApp();
});
