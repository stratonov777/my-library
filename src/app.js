/**
 * =================================================================
 * | app.js: Основной конфигурационный файл приложения Express     |
 * =================================================================
 * * Назначение:
 * Этот файл отвечает за создание и настройку экземпляра приложения Express.
 * Он связывает воедино все "middleware" (промежуточные обработчики)
 * и модули маршрутизации (роутеры).
 *
 * * Принцип работы:
 * 1. Создается экземпляр приложения Express.
 * 2. Подключается middleware `express.json()` для разбора тел POST/PUT запросов.
 * 3. Подключается middleware `express.static()` для раздачи статического
 * контента (HTML, CSS, клиентский JS) из папки `public`.
 * 4. Импортируется и подключается модуль с роутами для книг (`./api/books.js`)
 * по основному префиксу `/api/books`.
 * 5. Сконфигурированный экземпляр `app` экспортируется для использования
 * в `server.js`, который его и запускает.
 */

const express = require('express');
const path = require('path');
const bookRoutes = require('./api/books'); // Импортируем нашу логику для книг

// Создаем экземпляр приложения Express
const app = express();

// Middleware для автоматического парсинга JSON в телах запросов.
// Позволяет работать с `req.body` в обработчиках POST/PUT/PATCH.
app.use(express.json());

// Middleware для обслуживания статических файлов.
// Все файлы из папки `public` будут доступны напрямую по их именам.
// Например, `http://localhost:3000/css/main.css` будет отдавать файл `public/css/main.css`.
app.use(express.static(path.join(__dirname, '..', 'public')));

// Подключаем наш модуль с роутами для книг по префиксу /api/books.
// Теперь все запросы, начинающиеся с `/api/books`, будут передаваться в `bookRoutes`.
app.use('/api/books', bookRoutes);

// Экспортируем настроенное приложение для запуска в server.js
module.exports = app;
